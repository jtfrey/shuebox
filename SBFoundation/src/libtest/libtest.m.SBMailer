#import "SBFoundation.h"

//
// http://metal1.nss.udel.edu/images/icons/application.png
//
const unsigned char   appPng[] = {
  0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1F, 0xF3, 0xFF,
  0x61, 0x00, 0x00, 0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xAF, 0xC8, 0x37, 0x05, 0x8A,
  0xE9, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72,
  0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61,
  0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x01, 0x62, 0x49, 0x44, 0x41, 0x54, 0x18, 0x19,
  0xA5, 0xC1, 0x21, 0x6E, 0x94, 0x51, 0x18, 0x85, 0xE1, 0xF7, 0xDC, 0x7B, 0x21, 0x4D, 0x1A, 0xB0,
  0x60, 0x49, 0x58, 0x42, 0x1D, 0x08, 0xB6, 0x80, 0xA9, 0xC1, 0x62, 0x08, 0x0A, 0xC5, 0x0A, 0x48,
  0xC0, 0xD0, 0xA4, 0x49, 0x17, 0x41, 0x05, 0xDB, 0xA9, 0x24, 0x15, 0xB5, 0x55, 0x74, 0x48, 0xFA,
  0xFF, 0xDF, 0x39, 0xCC, 0x9D, 0x30, 0x06, 0x37, 0xE9, 0xF3, 0x28, 0x09, 0x0F, 0xA1, 0xB7, 0x9F,
  0x7E, 0x7C, 0x7C, 0xFD, 0xE6, 0xE4, 0xDB, 0xED, 0x26, 0xC7, 0x09, 0x60, 0x13, 0x9B, 0x72, 0x11,
  0x07, 0xC7, 0xA4, 0x0A, 0x27, 0xA4, 0x8A, 0xB2, 0x79, 0xFA, 0x78, 0xB9, 0xBB, 0xBA, 0xBA, 0xF9,
  0xFC, 0xF3, 0xFB, 0xE9, 0xC5, 0x38, 0x79, 0x75, 0x72, 0xFE, 0xE8, 0xE8, 0xB8, 0x3D, 0x3B, 0xE2,
  0x10, 0xC7, 0x77, 0x9B, 0x3A, 0x07, 0x2E, 0xC6, 0x66, 0x49, 0xDB, 0xDC, 0xFE, 0xE6, 0x50, 0x7F,
  0x96, 0x34, 0xB6, 0x46, 0x2A, 0x7C, 0x79, 0xF7, 0x92, 0x43, 0xBD, 0xFF, 0x7A, 0xCD, 0x34, 0x12,
  0x33, 0xDD, 0xAF, 0x45, 0x80, 0x38, 0x94, 0xC1, 0x04, 0x3B, 0x94, 0x4D, 0xAD, 0xA1, 0xD6, 0x50,
  0x31, 0xF7, 0x15, 0x5E, 0x3C, 0x7F, 0x42, 0xB9, 0x98, 0x06, 0x09, 0x93, 0x9A, 0x50, 0x42, 0x9A,
  0x88, 0x82, 0x2C, 0x5A, 0x13, 0x52, 0x43, 0x2A, 0xD4, 0x43, 0x77, 0x63, 0xAC, 0x61, 0xF2, 0x5A,
  0x4C, 0xA3, 0x5C, 0x4C, 0x0D, 0x88, 0x04, 0x82, 0x1E, 0xB0, 0xC0, 0x0E, 0x3D, 0xD0, 0xD4, 0x19,
  0x82, 0x52, 0xA8, 0x66, 0x26, 0x97, 0x99, 0x46, 0x1C, 0x76, 0x24, 0x48, 0x68, 0x40, 0x24, 0x10,
  0x48, 0x90, 0x0A, 0x16, 0x44, 0x40, 0x13, 0xDD, 0x9D, 0xC9, 0x2E, 0xA6, 0x61, 0x17, 0x7B, 0x92,
  0xD8, 0x49, 0x68, 0x40, 0x24, 0x3C, 0xC4, 0xB0, 0x71, 0xA0, 0x01, 0x16, 0x3B, 0xB6, 0x99, 0xC6,
  0xBA, 0x2C, 0xEC, 0x48, 0x08, 0x48, 0x82, 0x24, 0xC2, 0x56, 0x42, 0x63, 0xAB, 0x35, 0x3A, 0x50,
  0x09, 0x4D, 0x61, 0x5A, 0x97, 0x95, 0x69, 0xA4, 0xCC, 0xD4, 0x81, 0xB0, 0x25, 0x41, 0xC2, 0x24,
  0x89, 0x3D, 0x03, 0x5D, 0x22, 0x36, 0x53, 0x6C, 0xA6, 0x61, 0x9B, 0x3D, 0x01, 0x62, 0x4B, 0xE2,
  0x7F, 0x9D, 0x7F, 0x7A, 0x67, 0x72, 0xC2, 0x34, 0x6E, 0x7E, 0x5D, 0x5F, 0x7E, 0x38, 0x5B, 0x4E,
  0x5D, 0x85, 0xCB, 0x54, 0x15, 0xB6, 0xA9, 0x65, 0xC1, 0x36, 0x4E, 0x88, 0x8B, 0x54, 0x70, 0x4C,
  0x6C, 0x6C, 0xA6, 0x4B, 0xB6, 0x94, 0x84, 0x87, 0x68, 0x3C, 0xD0, 0x5F, 0xEC, 0x98, 0xF0, 0xFE,
  0x04, 0x3B, 0xEE, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
};
const size_t          appPngLen = 0x1D0;


//

SBError*
myComposer(
  SBMailer*   mailer,
  void*       context
)
{
  SBError*    error = [mailer sendTextPart:(SBString*)context];
  
  if ( ! error ) {
    // Add an attachment, too:
    SBData*   attachment = [[SBData alloc] initWithBytesNoCopy:appPng length:appPngLen];
    
    if ( attachment ) {
      error = [mailer sendDataPart:attachment mimeType:@"image/png" filename:@"application.png"];
    }
  }
  return error;
}

//

int
main()
{
  SBAutoreleasePool*    ourPool = [[SBAutoreleasePool alloc] init];
  
  SBString*     text = @"Any 8-bit byte value may be encoded with 3 characters, an \"=\" followed by two hexadecimal digits (0–9 or A–F) "
                        "representing the byte's numeric value. For example, a US-ASCII form feed character (decimal value 12) can be represented "
                        "by \"=0C\", and a US-ASCII equal sign (decimal value 61) is represented by \"=3D\". All characters except printable "
                        "ASCII characters or end of line characters must be encoded in this fashion.\r\n\r\n"
                        "All printable ASCII characters (decimal values between 33 and 126) may be represented by themselves, except \"=\" (decimal "
                        "61).\e\n\r\n"
                        "ASCII tab and space characters, decimal values 9 and 32, may be represented by themselves, except if these characters appear"
                        " at the end of a line. If one of these characters appears at the end of a line it must be encoded as \"=09\" (tab) or \"=20\""
                        " (space).\r\n\r\n"
                        "If the data being encoded contains meaningful line breaks, they must be encoded as an ASCII CR LF sequence, not as their "
                        "original byte values. Conversely if byte values 10 and 13 have meanings other than end of line then they must be encoded as "
                        "=0A and =0D.\r\n\r\n"
                        "Lines of quoted-printable encoded data must not be longer than 76 characters. To satisfy this requirement without altering "
                        "the encoded text, soft line breaks may be added as desired. A soft line break consists of an \"=\" at the end of an encoded "
                        "line, and does not cause a line break in the decoded text.\r\n\r\n"
                        "Special stuff:   π ¢ ™ ©   °";
  SBError*      error;
  SBMailer*     mailer = [SBMailer sharedMailer];

  [mailer setIsVerbose:YES];

  [mailer setDefaultSMTPSender:@"scruffy@shuebox.nss.udel.edu"];
  [mailer setDefaultSMTPRecipient:@"frey@udel.edu"];
  
  // Start session:
  error = [mailer sendMessageWithComposerFunction:myComposer
                                  context:(void*)text
                               properties:[SBDictionary dictionaryWithObjectsAndKeys:
                                                      @"\"Scruffy (SHUEBox Maintenance Daemon)\" <scruffy@shuebox.nss.udel.edu>", SBMailerFromKey,
                                                      @"[SHUEBox] Mailer testing w/ attachments", SBMailerSubjectKey,
                                                      @"SHUEBOX-0000000000000001", SBMailerMessageIdKey,
                                                      @"\"SHUEBox\" undisclosed recipients:;", SBMailerFakeRecipientKey,
                                                      nil
                                                    ]
              ];
  if ( error )
    [error writeErrorSummaryToStream:stderr];
  
  [ourPool release];
  
  return 0;
}


